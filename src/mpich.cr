# :nodoc:
module MPICH
  ANY_SOURCE = -2
  ANY_TAG = -1
  BSEND_OVERHEAD = 96
  DISPLACEMENT_CURRENT = -54278278
  DISTRIBUTE_BLOCK = 121
  DISTRIBUTE_CYCLIC = 122
  DISTRIBUTE_DFLT_DARG = -49767
  DISTRIBUTE_NONE = 123
  ERR_ACCESS = 20
  ERR_AMODE = 21
  ERR_ARG = 12
  ERR_ASSERT = 53
  ERR_BAD_FILE = 22
  ERR_BASE = 46
  ERR_BUFFER = 1
  ERR_COMM = 5
  ERR_CONVERSION = 23
  ERR_COUNT = 2
  ERR_DIMS = 11
  ERR_DISP = 52
  ERR_DUP_DATAREP = 24
  ERR_FILE = 27
  ERR_FILE_EXISTS = 25
  ERR_FILE_IN_USE = 26
  ERR_GROUP = 8
  ERR_INFO = 28
  ERR_INFO_KEY = 29
  ERR_INFO_NOKEY = 31
  ERR_INFO_VALUE = 30
  ERR_INTERN = 16
  ERR_IN_STATUS = 17
  ERR_IO = 32
  ERR_KEYVAL = 48
  ERR_LASTCODE = 1073741823
  ERR_LOCKTYPE = 47
  ERR_NAME = 33
  ERR_NOT_SAME = 35
  ERR_NO_MEM = 34
  ERR_NO_SPACE = 36
  ERR_NO_SUCH_FILE = 37
  ERR_OP = 9
  ERR_OTHER = 15
  ERR_PENDING = 18
  ERR_PORT = 38
  ERR_QUOTA = 39
  ERR_RANK = 6
  ERR_READ_ONLY = 40
  ERR_REQUEST = 19
  ERR_RMA_ATTACH = 56
  ERR_RMA_CONFLICT = 49
  ERR_RMA_FLAVOR = 58
  ERR_RMA_RANGE = 55
  ERR_RMA_SHARED = 57
  ERR_RMA_SYNC = 50
  ERR_ROOT = 7
  ERR_SERVICE = 41
  ERR_SIZE = 51
  ERR_SPAWN = 42
  ERR_TAG = 4
  ERR_TOPOLOGY = 10
  ERR_TRUNCATE = 14
  ERR_TYPE = 3
  ERR_UNKNOWN = 13
  ERR_UNSUPPORTED_DATAREP = 43
  ERR_UNSUPPORTED_OPERATION = 44
  ERR_WIN = 45
  HOST = 1681915907
  IDENT = 0
  IO = 1681915909
  KEYVAL_INVALID = 603979776
  LASTUSEDCODE = 1681915915
  LOCK_EXCLUSIVE = 234
  LOCK_SHARED = 235
  MAX_DATAREP_STRING = 128
  MAX_ERROR_STRING = 512
  MAX_INFO_KEY = 255
  MAX_INFO_VAL = 1024
  MAX_LIBRARY_VERSION_STRING = 8192
  MAX_OBJECT_NAME = 128
  MAX_PORT_NAME = 256
  MAX_PROCESSOR_NAME = 128
  MODE_APPEND = 128
  MODE_CREATE = 1
  MODE_DELETE_ON_CLOSE = 16
  MODE_EXCL = 64
  MODE_NOCHECK = 1024
  MODE_NOPRECEDE = 8192
  MODE_NOPUT = 4096
  MODE_NOSTORE = 2048
  MODE_NOSUCCEED = 16384
  MODE_RDONLY = 2
  MODE_RDWR = 8
  MODE_SEQUENTIAL = 256
  MODE_UNIQUE_OPEN = 32
  MODE_WRONLY = 4
  ORDER_C = 56
  ORDER_FORTRAN = 57
  SEEK_CUR = 602
  SEEK_END = 604
  SEEK_SET = 600
  SIMILAR = 2
  SUBVERSION = 1
  SUCCESS = 0
  TAG_UB = 1681915905

  TYPECLASS_COMPLEX = 3
  TYPECLASS_INTEGER = 2
  TYPECLASS_REAL = 1
  T_ERR_CANNOT_INIT = 61
  T_ERR_CVAR_SET_NEVER = 69
  T_ERR_CVAR_SET_NOT_NOW = 68
  T_ERR_INVALID = 74
  T_ERR_INVALID_HANDLE = 64
  T_ERR_INVALID_INDEX = 62
  T_ERR_INVALID_ITEM = 63
  T_ERR_INVALID_NAME = 73
  T_ERR_INVALID_SESSION = 67
  T_ERR_MEMORY = 59
  T_ERR_NOT_INITIALIZED = 60
  T_ERR_OUT_OF_HANDLES = 65
  T_ERR_OUT_OF_SESSIONS = 66
  T_ERR_PVAR_NO_ATOMIC = 72
  T_ERR_PVAR_NO_STARTSTOP = 70
  T_ERR_PVAR_NO_WRITE = 71
  UNDEFINED = -32766
  UNEQUAL = 3
  UNIVERSE_SIZE = 1681915913
  VERSION = 3
  WIN_BASE = 1711276033
  WIN_CREATE_FLAVOR = 1711276039
  WIN_DISP_UNIT = 1711276037
  WIN_MODEL = 1711276041
  WIN_SIZE = 1711276035
  WTIME_IS_GLOBAL = 1681915911

  # alias Datatype = LibC::Int
  # alias Comm = LibC::Int
  # alias MpirTPvarHandleS = Void
  # alias Fint = LibC::Int
  # alias Request = LibC::Int
  # alias Aint = LibC::Long
  # alias Op = LibC::Int
  # alias Group = LibC::Int
  # alias Info = LibC::Int
  # alias Errhandler = LibC::Int
  # alias Win = LibC::Int
  # alias Message = LibC::Int
  # alias Count = LibC::LongLong
  # alias Offset = LibC::LongLong

  # type File = Void*
  # type TEnum = Void*
  # type TCvarHandle = Void*
  # type TPvarSession = Void*
  # type TPvarHandle = Void*

  # $unweighted : LibC::Int*
  # $weights_empty : LibC::Int*
  # $t_pvar_all_handles : MpirTPvarHandleS*
  # $f_status_ignore : Fint*
  # $f_statuses_ignore : Fint*
  # $f08_status_ignore : F08Status*
  # $f08_statuses_ignore : F08Status*

  # struct Status
  #   count_lo : LibC::Int
  #   count_hi_and_cancelled : LibC::Int
  #   source : LibC::Int
  #   tag : LibC::Int
  #   error : LibC::Int
  # end

  # fun send = MPI_Send(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm) : LibC::Int
  # fun recv = MPI_Recv(buf : Void*, count : LibC::Int, datatype : Datatype, source : LibC::Int, tag : LibC::Int, comm : Comm, status : Status*) : LibC::Int
  # fun get_count = MPI_Get_count(status : Status*, datatype : Datatype, count : LibC::Int*) : LibC::Int
  # fun bsend = MPI_Bsend(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm) : LibC::Int
  # fun ssend = MPI_Ssend(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm) : LibC::Int
  # fun rsend = MPI_Rsend(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm) : LibC::Int
  # fun buffer_attach = MPI_Buffer_attach(buffer : Void*, size : LibC::Int) : LibC::Int
  # fun buffer_detach = MPI_Buffer_detach(buffer_addr : Void*, size : LibC::Int*) : LibC::Int
  # fun isend = MPI_Isend(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int

  # fun ibsend = MPI_Ibsend(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun issend = MPI_Issend(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun irsend = MPI_Irsend(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun irecv = MPI_Irecv(buf : Void*, count : LibC::Int, datatype : Datatype, source : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun wait = MPI_Wait(request : Request*, status : Status*) : LibC::Int
  # fun test = MPI_Test(request : Request*, flag : LibC::Int*, status : Status*) : LibC::Int
  # fun request_free = MPI_Request_free(request : Request*) : LibC::Int
  # fun waitany = MPI_Waitany(count : LibC::Int, array_of_requests : Request*, indx : LibC::Int*, status : Status*) : LibC::Int
  # fun testany = MPI_Testany(count : LibC::Int, array_of_requests : Request*, indx : LibC::Int*, flag : LibC::Int*, status : Status*) : LibC::Int
  # fun waitall = MPI_Waitall(count : LibC::Int, array_of_requests : Request*, array_of_statuses : Status*) : LibC::Int
  # fun testall = MPI_Testall(count : LibC::Int, array_of_requests : Request*, flag : LibC::Int*, array_of_statuses : Status*) : LibC::Int
  # fun waitsome = MPI_Waitsome(incount : LibC::Int, array_of_requests : Request*, outcount : LibC::Int*, array_of_indices : LibC::Int*, array_of_statuses : Status*) : LibC::Int
  # fun testsome = MPI_Testsome(incount : LibC::Int, array_of_requests : Request*, outcount : LibC::Int*, array_of_indices : LibC::Int*, array_of_statuses : Status*) : LibC::Int
  # fun iprobe = MPI_Iprobe(source : LibC::Int, tag : LibC::Int, comm : Comm, flag : LibC::Int*, status : Status*) : LibC::Int
  # fun probe = MPI_Probe(source : LibC::Int, tag : LibC::Int, comm : Comm, status : Status*) : LibC::Int
  # fun cancel = MPI_Cancel(request : Request*) : LibC::Int
  # fun test_cancelled = MPI_Test_cancelled(status : Status*, flag : LibC::Int*) : LibC::Int
  # fun send_init = MPI_Send_init(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun bsend_init = MPI_Bsend_init(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun ssend_init = MPI_Ssend_init(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun rsend_init = MPI_Rsend_init(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun recv_init = MPI_Recv_init(buf : Void*, count : LibC::Int, datatype : Datatype, source : LibC::Int, tag : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun start = MPI_Start(request : Request*) : LibC::Int
  # fun startall = MPI_Startall(count : LibC::Int, array_of_requests : Request*) : LibC::Int
  # fun sendrecv = MPI_Sendrecv(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, dest : LibC::Int, sendtag : LibC::Int, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, source : LibC::Int, recvtag : LibC::Int, comm : Comm, status : Status*) : LibC::Int
  # fun sendrecv_replace = MPI_Sendrecv_replace(buf : Void*, count : LibC::Int, datatype : Datatype, dest : LibC::Int, sendtag : LibC::Int, source : LibC::Int, recvtag : LibC::Int, comm : Comm, status : Status*) : LibC::Int
  # fun type_contiguous = MPI_Type_contiguous(count : LibC::Int, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_vector = MPI_Type_vector(count : LibC::Int, blocklength : LibC::Int, stride : LibC::Int, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_hvector = MPI_Type_hvector(count : LibC::Int, blocklength : LibC::Int, stride : Aint, oldtype : Datatype, newtype : Datatype*) : LibC::Int

  # fun type_indexed = MPI_Type_indexed(count : LibC::Int, array_of_blocklengths : LibC::Int*, array_of_displacements : LibC::Int*, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_hindexed = MPI_Type_hindexed(count : LibC::Int, array_of_blocklengths : LibC::Int*, array_of_displacements : Aint*, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_struct = MPI_Type_struct(count : LibC::Int, array_of_blocklengths : LibC::Int*, array_of_displacements : Aint*, array_of_types : Datatype*, newtype : Datatype*) : LibC::Int
  # fun address = MPI_Address(location : Void*, address : Aint*) : LibC::Int
  # fun type_extent = MPI_Type_extent(datatype : Datatype, extent : Aint*) : LibC::Int
  # fun type_size = MPI_Type_size(datatype : Datatype, size : LibC::Int*) : LibC::Int
  # fun type_lb = MPI_Type_lb(datatype : Datatype, displacement : Aint*) : LibC::Int
  # fun type_ub = MPI_Type_ub(datatype : Datatype, displacement : Aint*) : LibC::Int
  # fun type_commit = MPI_Type_commit(datatype : Datatype*) : LibC::Int
  # fun type_free = MPI_Type_free(datatype : Datatype*) : LibC::Int
  # fun get_elements = MPI_Get_elements(status : Status*, datatype : Datatype, count : LibC::Int*) : LibC::Int
  # fun pack = MPI_Pack(inbuf : Void*, incount : LibC::Int, datatype : Datatype, outbuf : Void*, outsize : LibC::Int, position : LibC::Int*, comm : Comm) : LibC::Int
  # fun unpack = MPI_Unpack(inbuf : Void*, insize : LibC::Int, position : LibC::Int*, outbuf : Void*, outcount : LibC::Int, datatype : Datatype, comm : Comm) : LibC::Int
  # fun pack_size = MPI_Pack_size(incount : LibC::Int, datatype : Datatype, comm : Comm, size : LibC::Int*) : LibC::Int
  # fun barrier = MPI_Barrier(comm : Comm) : LibC::Int
  # fun bcast = MPI_Bcast(buffer : Void*, count : LibC::Int, datatype : Datatype, root : LibC::Int, comm : Comm) : LibC::Int
  # fun gather = MPI_Gather(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, root : LibC::Int, comm : Comm) : LibC::Int
  # fun gatherv = MPI_Gatherv(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, displs : LibC::Int*, recvtype : Datatype, root : LibC::Int, comm : Comm) : LibC::Int
  # fun scatter = MPI_Scatter(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, root : LibC::Int, comm : Comm) : LibC::Int
  # fun scatterv = MPI_Scatterv(sendbuf : Void*, sendcounts : LibC::Int*, displs : LibC::Int*, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, root : LibC::Int, comm : Comm) : LibC::Int
  # fun allgather = MPI_Allgather(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, comm : Comm) : LibC::Int
  # fun allgatherv = MPI_Allgatherv(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, displs : LibC::Int*, recvtype : Datatype, comm : Comm) : LibC::Int
  # fun alltoall = MPI_Alltoall(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, comm : Comm) : LibC::Int
  # fun alltoallv = MPI_Alltoallv(sendbuf : Void*, sendcounts : LibC::Int*, sdispls : LibC::Int*, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, rdispls : LibC::Int*, recvtype : Datatype, comm : Comm) : LibC::Int
  # fun alltoallw = MPI_Alltoallw(sendbuf : Void*, sendcounts : LibC::Int*, sdispls : LibC::Int*, sendtypes : Datatype*, recvbuf : Void*, recvcounts : LibC::Int*, rdispls : LibC::Int*, recvtypes : Datatype*, comm : Comm) : LibC::Int
  # fun exscan = MPI_Exscan(sendbuf : Void*, recvbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op, comm : Comm) : LibC::Int

  # fun reduce = MPI_Reduce(sendbuf : Void*, recvbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op, root : LibC::Int, comm : Comm) : LibC::Int
  # fun op_create = MPI_Op_create(user_fn : (Void*, Void*, LibC::Int*, Datatype* -> Void), commute : LibC::Int, op : Op*) : LibC::Int
  # fun op_free = MPI_Op_free(op : Op*) : LibC::Int
  # fun allreduce = MPI_Allreduce(sendbuf : Void*, recvbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op, comm : Comm) : LibC::Int
  # fun reduce_scatter = MPI_Reduce_scatter(sendbuf : Void*, recvbuf : Void*, recvcounts : LibC::Int*, datatype : Datatype, op : Op, comm : Comm) : LibC::Int
  # fun scan = MPI_Scan(sendbuf : Void*, recvbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op, comm : Comm) : LibC::Int
  # fun group_size = MPI_Group_size(group : Group, size : LibC::Int*) : LibC::Int

  # fun group_rank = MPI_Group_rank(group : Group, rank : LibC::Int*) : LibC::Int
  # fun group_translate_ranks = MPI_Group_translate_ranks(group1 : Group, n : LibC::Int, ranks1 : LibC::Int*, group2 : Group, ranks2 : LibC::Int*) : LibC::Int
  # fun group_compare = MPI_Group_compare(group1 : Group, group2 : Group, result : LibC::Int*) : LibC::Int
  # fun comm_group = MPI_Comm_group(comm : Comm, group : Group*) : LibC::Int
  # fun group_union = MPI_Group_union(group1 : Group, group2 : Group, newgroup : Group*) : LibC::Int
  # fun group_intersection = MPI_Group_intersection(group1 : Group, group2 : Group, newgroup : Group*) : LibC::Int
  # fun group_difference = MPI_Group_difference(group1 : Group, group2 : Group, newgroup : Group*) : LibC::Int
  # fun group_incl = MPI_Group_incl(group : Group, n : LibC::Int, ranks : LibC::Int*, newgroup : Group*) : LibC::Int
  # fun group_excl = MPI_Group_excl(group : Group, n : LibC::Int, ranks : LibC::Int*, newgroup : Group*) : LibC::Int
  # fun group_range_incl = MPI_Group_range_incl(group : Group, n : LibC::Int, ranges : LibC::Int[3]*, newgroup : Group*) : LibC::Int
  # fun group_range_excl = MPI_Group_range_excl(group : Group, n : LibC::Int, ranges : LibC::Int[3]*, newgroup : Group*) : LibC::Int
  # fun group_free = MPI_Group_free(group : Group*) : LibC::Int
  # fun comm_size = MPI_Comm_size(comm : Comm, size : LibC::Int*) : LibC::Int
  # fun comm_rank = MPI_Comm_rank(comm : Comm, rank : LibC::Int*) : LibC::Int
  # fun comm_compare = MPI_Comm_compare(comm1 : Comm, comm2 : Comm, result : LibC::Int*) : LibC::Int
  # fun comm_dup = MPI_Comm_dup(comm : Comm, newcomm : Comm*) : LibC::Int
  # fun comm_dup_with_info = MPI_Comm_dup_with_info(comm : Comm, info : Info, newcomm : Comm*) : LibC::Int

  # fun comm_create = MPI_Comm_create(comm : Comm, group : Group, newcomm : Comm*) : LibC::Int
  # fun comm_split = MPI_Comm_split(comm : Comm, color : LibC::Int, key : LibC::Int, newcomm : Comm*) : LibC::Int
  # fun comm_free = MPI_Comm_free(comm : Comm*) : LibC::Int
  # fun comm_test_inter = MPI_Comm_test_inter(comm : Comm, flag : LibC::Int*) : LibC::Int
  # fun comm_remote_size = MPI_Comm_remote_size(comm : Comm, size : LibC::Int*) : LibC::Int
  # fun comm_remote_group = MPI_Comm_remote_group(comm : Comm, group : Group*) : LibC::Int
  # fun intercomm_create = MPI_Intercomm_create(local_comm : Comm, local_leader : LibC::Int, peer_comm : Comm, remote_leader : LibC::Int, tag : LibC::Int, newintercomm : Comm*) : LibC::Int
  # fun intercomm_merge = MPI_Intercomm_merge(intercomm : Comm, high : LibC::Int, newintracomm : Comm*) : LibC::Int
  # fun keyval_create = MPI_Keyval_create(copy_fn : (Comm, LibC::Int, Void*, Void*, Void*, LibC::Int* -> LibC::Int), delete_fn : (Comm, LibC::Int, Void*, Void* -> LibC::Int), keyval : LibC::Int*, extra_state : Void*) : LibC::Int
  # fun keyval_free = MPI_Keyval_free(keyval : LibC::Int*) : LibC::Int
  # fun attr_put = MPI_Attr_put(comm : Comm, keyval : LibC::Int, attribute_val : Void*) : LibC::Int
  # fun attr_get = MPI_Attr_get(comm : Comm, keyval : LibC::Int, attribute_val : Void*, flag : LibC::Int*) : LibC::Int
  # fun attr_delete = MPI_Attr_delete(comm : Comm, keyval : LibC::Int) : LibC::Int
  # fun topo_test = MPI_Topo_test(comm : Comm, status : LibC::Int*) : LibC::Int
  # fun cart_create = MPI_Cart_create(comm_old : Comm, ndims : LibC::Int, dims : LibC::Int*, periods : LibC::Int*, reorder : LibC::Int, comm_cart : Comm*) : LibC::Int
  # fun dims_create = MPI_Dims_create(nnodes : LibC::Int, ndims : LibC::Int, dims : LibC::Int*) : LibC::Int
  # fun graph_create = MPI_Graph_create(comm_old : Comm, nnodes : LibC::Int, indx : LibC::Int*, edges : LibC::Int*, reorder : LibC::Int, comm_graph : Comm*) : LibC::Int
  # fun graphdims_get = MPI_Graphdims_get(comm : Comm, nnodes : LibC::Int*, nedges : LibC::Int*) : LibC::Int
  # fun graph_get = MPI_Graph_get(comm : Comm, maxindex : LibC::Int, maxedges : LibC::Int, indx : LibC::Int*, edges : LibC::Int*) : LibC::Int
  # fun cartdim_get = MPI_Cartdim_get(comm : Comm, ndims : LibC::Int*) : LibC::Int
  # fun cart_get = MPI_Cart_get(comm : Comm, maxdims : LibC::Int, dims : LibC::Int*, periods : LibC::Int*, coords : LibC::Int*) : LibC::Int
  # fun cart_rank = MPI_Cart_rank(comm : Comm, coords : LibC::Int*, rank : LibC::Int*) : LibC::Int
  # fun cart_coords = MPI_Cart_coords(comm : Comm, rank : LibC::Int, maxdims : LibC::Int, coords : LibC::Int*) : LibC::Int
  # fun graph_neighbors_count = MPI_Graph_neighbors_count(comm : Comm, rank : LibC::Int, nneighbors : LibC::Int*) : LibC::Int
  # fun graph_neighbors = MPI_Graph_neighbors(comm : Comm, rank : LibC::Int, maxneighbors : LibC::Int, neighbors : LibC::Int*) : LibC::Int
  # fun cart_shift = MPI_Cart_shift(comm : Comm, direction : LibC::Int, disp : LibC::Int, rank_source : LibC::Int*, rank_dest : LibC::Int*) : LibC::Int
  # fun cart_sub = MPI_Cart_sub(comm : Comm, remain_dims : LibC::Int*, newcomm : Comm*) : LibC::Int
  # fun cart_map = MPI_Cart_map(comm : Comm, ndims : LibC::Int, dims : LibC::Int*, periods : LibC::Int*, newrank : LibC::Int*) : LibC::Int
  # fun graph_map = MPI_Graph_map(comm : Comm, nnodes : LibC::Int, indx : LibC::Int*, edges : LibC::Int*, newrank : LibC::Int*) : LibC::Int
  # fun get_processor_name = MPI_Get_processor_name(name : LibC::Char*, resultlen : LibC::Int*) : LibC::Int
  # fun get_version = MPI_Get_version(version : LibC::Int*, subversion : LibC::Int*) : LibC::Int
  # fun get_library_version = MPI_Get_library_version(version : LibC::Char*, resultlen : LibC::Int*) : LibC::Int
  # fun errhandler_create = MPI_Errhandler_create(function : (Comm*, LibC::Int* -> Void), errhandler : Errhandler*) : LibC::Int

  # fun errhandler_set = MPI_Errhandler_set(comm : Comm, errhandler : Errhandler) : LibC::Int
  # fun errhandler_get = MPI_Errhandler_get(comm : Comm, errhandler : Errhandler*) : LibC::Int
  # fun errhandler_free = MPI_Errhandler_free(errhandler : Errhandler*) : LibC::Int
  # fun error_string = MPI_Error_string(errorcode : LibC::Int, string : LibC::Char*, resultlen : LibC::Int*) : LibC::Int
  # fun error_class = MPI_Error_class(errorcode : LibC::Int, errorclass : LibC::Int*) : LibC::Int
  # fun wtime = MPI_Wtime : LibC::Double
  # fun wtick = MPI_Wtick : LibC::Double
  # fun init = MPI_Init(argc : LibC::Int*, argv : LibC::Char***) : LibC::Int
  # fun finalize = MPI_Finalize : LibC::Int
  # fun initialized = MPI_Initialized(flag : LibC::Int*) : LibC::Int
  # fun abort = MPI_Abort(comm : Comm, errorcode : LibC::Int) : LibC::Int
  # fun pcontrol = MPI_Pcontrol(level : LibC::Int, ...) : LibC::Int
  # fun close_port = MPI_Close_port(port_name : LibC::Char*) : LibC::Int
  # fun comm_accept = MPI_Comm_accept(port_name : LibC::Char*, info : Info, root : LibC::Int, comm : Comm, newcomm : Comm*) : LibC::Int
  # fun comm_connect = MPI_Comm_connect(port_name : LibC::Char*, info : Info, root : LibC::Int, comm : Comm, newcomm : Comm*) : LibC::Int
  # fun comm_disconnect = MPI_Comm_disconnect(comm : Comm*) : LibC::Int
  # fun comm_get_parent = MPI_Comm_get_parent(parent : Comm*) : LibC::Int
  # fun comm_join = MPI_Comm_join(fd : LibC::Int, intercomm : Comm*) : LibC::Int
  # fun comm_spawn = MPI_Comm_spawn(command : LibC::Char*, argv : LibC::Char**, maxprocs : LibC::Int, info : Info, root : LibC::Int, comm : Comm, intercomm : Comm*, array_of_errcodes : LibC::Int*) : LibC::Int
  # fun comm_spawn_multiple = MPI_Comm_spawn_multiple(count : LibC::Int, array_of_commands : LibC::Char**, array_of_argv : LibC::Char***, array_of_maxprocs : LibC::Int*, array_of_info : Info*, root : LibC::Int, comm : Comm, intercomm : Comm*, array_of_errcodes : LibC::Int*) : LibC::Int
  # fun lookup_name = MPI_Lookup_name(service_name : LibC::Char*, info : Info, port_name : LibC::Char*) : LibC::Int
  # fun open_port = MPI_Open_port(info : Info, port_name : LibC::Char*) : LibC::Int
  # fun publish_name = MPI_Publish_name(service_name : LibC::Char*, info : Info, port_name : LibC::Char*) : LibC::Int
  # fun unpublish_name = MPI_Unpublish_name(service_name : LibC::Char*, info : Info, port_name : LibC::Char*) : LibC::Int
  # fun comm_set_info = MPI_Comm_set_info(comm : Comm, info : Info) : LibC::Int
  # fun comm_get_info = MPI_Comm_get_info(comm : Comm, info : Info*) : LibC::Int
  # fun accumulate = MPI_Accumulate(origin_addr : Void*, origin_count : LibC::Int, origin_datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, target_count : LibC::Int, target_datatype : Datatype, op : Op, win : Win) : LibC::Int

  # fun get = MPI_Get(origin_addr : Void*, origin_count : LibC::Int, origin_datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, target_count : LibC::Int, target_datatype : Datatype, win : Win) : LibC::Int
  # fun put = MPI_Put(origin_addr : Void*, origin_count : LibC::Int, origin_datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, target_count : LibC::Int, target_datatype : Datatype, win : Win) : LibC::Int
  # fun win_complete = MPI_Win_complete(win : Win) : LibC::Int
  # fun win_create = MPI_Win_create(base : Void*, size : Aint, disp_unit : LibC::Int, info : Info, comm : Comm, win : Win*) : LibC::Int
  # fun win_fence = MPI_Win_fence(assert : LibC::Int, win : Win) : LibC::Int
  # fun win_free = MPI_Win_free(win : Win*) : LibC::Int
  # fun win_get_group = MPI_Win_get_group(win : Win, group : Group*) : LibC::Int
  # fun win_lock = MPI_Win_lock(lock_type : LibC::Int, rank : LibC::Int, assert : LibC::Int, win : Win) : LibC::Int
  # fun win_post = MPI_Win_post(group : Group, assert : LibC::Int, win : Win) : LibC::Int
  # fun win_start = MPI_Win_start(group : Group, assert : LibC::Int, win : Win) : LibC::Int
  # fun win_test = MPI_Win_test(win : Win, flag : LibC::Int*) : LibC::Int
  # fun win_unlock = MPI_Win_unlock(rank : LibC::Int, win : Win) : LibC::Int
  # fun win_wait = MPI_Win_wait(win : Win) : LibC::Int
  # fun win_allocate = MPI_Win_allocate(size : Aint, disp_unit : LibC::Int, info : Info, comm : Comm, baseptr : Void*, win : Win*) : LibC::Int
  # fun win_allocate_shared = MPI_Win_allocate_shared(size : Aint, disp_unit : LibC::Int, info : Info, comm : Comm, baseptr : Void*, win : Win*) : LibC::Int
  # fun win_shared_query = MPI_Win_shared_query(win : Win, rank : LibC::Int, size : Aint*, disp_unit : LibC::Int*, baseptr : Void*) : LibC::Int
  # fun win_create_dynamic = MPI_Win_create_dynamic(info : Info, comm : Comm, win : Win*) : LibC::Int
  # fun win_attach = MPI_Win_attach(win : Win, base : Void*, size : Aint) : LibC::Int
  # fun win_detach = MPI_Win_detach(win : Win, base : Void*) : LibC::Int
  # fun win_get_info = MPI_Win_get_info(win : Win, info_used : Info*) : LibC::Int
  # fun win_set_info = MPI_Win_set_info(win : Win, info : Info) : LibC::Int
  # fun get_accumulate = MPI_Get_accumulate(origin_addr : Void*, origin_count : LibC::Int, origin_datatype : Datatype, result_addr : Void*, result_count : LibC::Int, result_datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, target_count : LibC::Int, target_datatype : Datatype, op : Op, win : Win) : LibC::Int
  # fun fetch_and_op = MPI_Fetch_and_op(origin_addr : Void*, result_addr : Void*, datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, op : Op, win : Win) : LibC::Int
  # fun compare_and_swap = MPI_Compare_and_swap(origin_addr : Void*, compare_addr : Void*, result_addr : Void*, datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, win : Win) : LibC::Int
  # fun rput = MPI_Rput(origin_addr : Void*, origin_count : LibC::Int, origin_datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, target_count : LibC::Int, target_datatype : Datatype, win : Win, request : Request*) : LibC::Int
  # fun rget = MPI_Rget(origin_addr : Void*, origin_count : LibC::Int, origin_datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, target_count : LibC::Int, target_datatype : Datatype, win : Win, request : Request*) : LibC::Int
  # fun raccumulate = MPI_Raccumulate(origin_addr : Void*, origin_count : LibC::Int, origin_datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, target_count : LibC::Int, target_datatype : Datatype, op : Op, win : Win, request : Request*) : LibC::Int
  # fun rget_accumulate = MPI_Rget_accumulate(origin_addr : Void*, origin_count : LibC::Int, origin_datatype : Datatype, result_addr : Void*, result_count : LibC::Int, result_datatype : Datatype, target_rank : LibC::Int, target_disp : Aint, target_count : LibC::Int, target_datatype : Datatype, op : Op, win : Win, request : Request*) : LibC::Int
  # fun win_lock_all = MPI_Win_lock_all(assert : LibC::Int, win : Win) : LibC::Int
  # fun win_unlock_all = MPI_Win_unlock_all(win : Win) : LibC::Int
  # fun win_flush = MPI_Win_flush(rank : LibC::Int, win : Win) : LibC::Int
  # fun win_flush_all = MPI_Win_flush_all(win : Win) : LibC::Int
  # fun win_flush_local = MPI_Win_flush_local(rank : LibC::Int, win : Win) : LibC::Int
  # fun win_flush_local_all = MPI_Win_flush_local_all(win : Win) : LibC::Int
  # fun win_sync = MPI_Win_sync(win : Win) : LibC::Int
  # fun add_error_class = MPI_Add_error_class(errorclass : LibC::Int*) : LibC::Int
  # fun add_error_code = MPI_Add_error_code(errorclass : LibC::Int, errorcode : LibC::Int*) : LibC::Int
  # fun add_error_string = MPI_Add_error_string(errorcode : LibC::Int, string : LibC::Char*) : LibC::Int
  # fun comm_call_errhandler = MPI_Comm_call_errhandler(comm : Comm, errorcode : LibC::Int) : LibC::Int
  # fun comm_create_keyval = MPI_Comm_create_keyval(comm_copy_attr_fn : (Comm, LibC::Int, Void*, Void*, Void*, LibC::Int* -> LibC::Int), comm_delete_attr_fn : (Comm, LibC::Int, Void*, Void* -> LibC::Int), comm_keyval : LibC::Int*, extra_state : Void*) : LibC::Int
  # fun comm_delete_attr = MPI_Comm_delete_attr(comm : Comm, comm_keyval : LibC::Int) : LibC::Int
  # fun comm_free_keyval = MPI_Comm_free_keyval(comm_keyval : LibC::Int*) : LibC::Int
  # fun comm_get_attr = MPI_Comm_get_attr(comm : Comm, comm_keyval : LibC::Int, attribute_val : Void*, flag : LibC::Int*) : LibC::Int
  # fun comm_get_name = MPI_Comm_get_name(comm : Comm, comm_name : LibC::Char*, resultlen : LibC::Int*) : LibC::Int
  # fun comm_set_attr = MPI_Comm_set_attr(comm : Comm, comm_keyval : LibC::Int, attribute_val : Void*) : LibC::Int
  # fun comm_set_name = MPI_Comm_set_name(comm : Comm, comm_name : LibC::Char*) : LibC::Int
  # fun file_call_errhandler = MPI_File_call_errhandler(fh : File, errorcode : LibC::Int) : LibC::Int

  # fun grequest_complete = MPI_Grequest_complete(request : Request) : LibC::Int
  # fun grequest_start = MPI_Grequest_start(query_fn : (Void*, Status* -> LibC::Int), free_fn : (Void* -> LibC::Int), cancel_fn : (Void*, LibC::Int -> LibC::Int), extra_state : Void*, request : Request*) : LibC::Int
  # fun init_thread = MPI_Init_thread(argc : LibC::Int*, argv : LibC::Char***, required : LibC::Int, provided : LibC::Int*) : LibC::Int
  # fun is_thread_main = MPI_Is_thread_main(flag : LibC::Int*) : LibC::Int
  # fun query_thread = MPI_Query_thread(provided : LibC::Int*) : LibC::Int
  # fun status_set_cancelled = MPI_Status_set_cancelled(status : Status*, flag : LibC::Int) : LibC::Int
  # fun status_set_elements = MPI_Status_set_elements(status : Status*, datatype : Datatype, count : LibC::Int) : LibC::Int
  # fun type_create_keyval = MPI_Type_create_keyval(type_copy_attr_fn : (Datatype, LibC::Int, Void*, Void*, Void*, LibC::Int* -> LibC::Int), type_delete_attr_fn : (Datatype, LibC::Int, Void*, Void* -> LibC::Int), type_keyval : LibC::Int*, extra_state : Void*) : LibC::Int
  # fun type_delete_attr = MPI_Type_delete_attr(datatype : Datatype, type_keyval : LibC::Int) : LibC::Int
  # fun type_dup = MPI_Type_dup(oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_free_keyval = MPI_Type_free_keyval(type_keyval : LibC::Int*) : LibC::Int
  # fun type_get_attr = MPI_Type_get_attr(datatype : Datatype, type_keyval : LibC::Int, attribute_val : Void*, flag : LibC::Int*) : LibC::Int
  # fun type_get_contents = MPI_Type_get_contents(datatype : Datatype, max_integers : LibC::Int, max_addresses : LibC::Int, max_datatypes : LibC::Int, array_of_integers : LibC::Int*, array_of_addresses : Aint*, array_of_datatypes : Datatype*) : LibC::Int
  # fun type_get_envelope = MPI_Type_get_envelope(datatype : Datatype, num_integers : LibC::Int*, num_addresses : LibC::Int*, num_datatypes : LibC::Int*, combiner : LibC::Int*) : LibC::Int
  # fun type_get_name = MPI_Type_get_name(datatype : Datatype, type_name : LibC::Char*, resultlen : LibC::Int*) : LibC::Int
  # fun type_set_attr = MPI_Type_set_attr(datatype : Datatype, type_keyval : LibC::Int, attribute_val : Void*) : LibC::Int
  # fun type_set_name = MPI_Type_set_name(datatype : Datatype, type_name : LibC::Char*) : LibC::Int
  # fun type_match_size = MPI_Type_match_size(typeclass : LibC::Int, size : LibC::Int, datatype : Datatype*) : LibC::Int
  # fun win_call_errhandler = MPI_Win_call_errhandler(win : Win, errorcode : LibC::Int) : LibC::Int
  # fun win_create_keyval = MPI_Win_create_keyval(win_copy_attr_fn : (Win, LibC::Int, Void*, Void*, Void*, LibC::Int* -> LibC::Int), win_delete_attr_fn : (Win, LibC::Int, Void*, Void* -> LibC::Int), win_keyval : LibC::Int*, extra_state : Void*) : LibC::Int
  # fun win_delete_attr = MPI_Win_delete_attr(win : Win, win_keyval : LibC::Int) : LibC::Int
  # fun win_free_keyval = MPI_Win_free_keyval(win_keyval : LibC::Int*) : LibC::Int
  # fun win_get_attr = MPI_Win_get_attr(win : Win, win_keyval : LibC::Int, attribute_val : Void*, flag : LibC::Int*) : LibC::Int
  # fun win_get_name = MPI_Win_get_name(win : Win, win_name : LibC::Char*, resultlen : LibC::Int*) : LibC::Int
  # fun win_set_attr = MPI_Win_set_attr(win : Win, win_keyval : LibC::Int, attribute_val : Void*) : LibC::Int
  # fun win_set_name = MPI_Win_set_name(win : Win, win_name : LibC::Char*) : LibC::Int
  # fun alloc_mem = MPI_Alloc_mem(size : Aint, info : Info, baseptr : Void*) : LibC::Int
  # fun comm_create_errhandler = MPI_Comm_create_errhandler(comm_errhandler_fn : (Comm*, LibC::Int* -> Void), errhandler : Errhandler*) : LibC::Int
  # fun comm_get_errhandler = MPI_Comm_get_errhandler(comm : Comm, errhandler : Errhandler*) : LibC::Int
  # fun comm_set_errhandler = MPI_Comm_set_errhandler(comm : Comm, errhandler : Errhandler) : LibC::Int
  # fun file_create_errhandler = MPI_File_create_errhandler(file_errhandler_fn : (File*, LibC::Int* -> Void), errhandler : Errhandler*) : LibC::Int
  # fun file_get_errhandler = MPI_File_get_errhandler(file : File, errhandler : Errhandler*) : LibC::Int
  # fun file_set_errhandler = MPI_File_set_errhandler(file : File, errhandler : Errhandler) : LibC::Int
  # fun finalized = MPI_Finalized(flag : LibC::Int*) : LibC::Int
  # fun free_mem = MPI_Free_mem(base : Void*) : LibC::Int
  # fun get_address = MPI_Get_address(location : Void*, address : Aint*) : LibC::Int
  # fun info_create = MPI_Info_create(info : Info*) : LibC::Int
  # fun info_delete = MPI_Info_delete(info : Info, key : LibC::Char*) : LibC::Int
  # fun info_dup = MPI_Info_dup(info : Info, newinfo : Info*) : LibC::Int
  # fun info_free = MPI_Info_free(info : Info*) : LibC::Int
  # fun info_get = MPI_Info_get(info : Info, key : LibC::Char*, valuelen : LibC::Int, value : LibC::Char*, flag : LibC::Int*) : LibC::Int
  # fun info_get_nkeys = MPI_Info_get_nkeys(info : Info, nkeys : LibC::Int*) : LibC::Int
  # fun info_get_nthkey = MPI_Info_get_nthkey(info : Info, n : LibC::Int, key : LibC::Char*) : LibC::Int
  # fun info_get_valuelen = MPI_Info_get_valuelen(info : Info, key : LibC::Char*, valuelen : LibC::Int*, flag : LibC::Int*) : LibC::Int
  # fun info_set = MPI_Info_set(info : Info, key : LibC::Char*, value : LibC::Char*) : LibC::Int
  # fun pack_external = MPI_Pack_external(datarep : LibC::Char*, inbuf : Void*, incount : LibC::Int, datatype : Datatype, outbuf : Void*, outsize : Aint, position : Aint*) : LibC::Int
  # fun pack_external_size = MPI_Pack_external_size(datarep : LibC::Char*, incount : LibC::Int, datatype : Datatype, size : Aint*) : LibC::Int
  # fun request_get_status = MPI_Request_get_status(request : Request, flag : LibC::Int*, status : Status*) : LibC::Int
  # fun status_c2f = MPI_Status_c2f(c_status : Status*, f_status : Fint*) : LibC::Int
  # fun status_f2c = MPI_Status_f2c(f_status : Fint*, c_status : Status*) : LibC::Int
  # fun type_create_darray = MPI_Type_create_darray(size : LibC::Int, rank : LibC::Int, ndims : LibC::Int, array_of_gsizes : LibC::Int*, array_of_distribs : LibC::Int*, array_of_dargs : LibC::Int*, array_of_psizes : LibC::Int*, order : LibC::Int, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_create_hindexed = MPI_Type_create_hindexed(count : LibC::Int, array_of_blocklengths : LibC::Int*, array_of_displacements : Aint*, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_create_hvector = MPI_Type_create_hvector(count : LibC::Int, blocklength : LibC::Int, stride : Aint, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_create_indexed_block = MPI_Type_create_indexed_block(count : LibC::Int, blocklength : LibC::Int, array_of_displacements : LibC::Int*, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_create_hindexed_block = MPI_Type_create_hindexed_block(count : LibC::Int, blocklength : LibC::Int, array_of_displacements : Aint*, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_create_resized = MPI_Type_create_resized(oldtype : Datatype, lb : Aint, extent : Aint, newtype : Datatype*) : LibC::Int
  # fun type_create_struct = MPI_Type_create_struct(count : LibC::Int, array_of_blocklengths : LibC::Int*, array_of_displacements : Aint*, array_of_types : Datatype*, newtype : Datatype*) : LibC::Int
  # fun type_create_subarray = MPI_Type_create_subarray(ndims : LibC::Int, array_of_sizes : LibC::Int*, array_of_subsizes : LibC::Int*, array_of_starts : LibC::Int*, order : LibC::Int, oldtype : Datatype, newtype : Datatype*) : LibC::Int
  # fun type_get_extent = MPI_Type_get_extent(datatype : Datatype, lb : Aint*, extent : Aint*) : LibC::Int
  # fun type_get_true_extent = MPI_Type_get_true_extent(datatype : Datatype, true_lb : Aint*, true_extent : Aint*) : LibC::Int
  # fun unpack_external = MPI_Unpack_external(datarep : LibC::Char*, inbuf : Void*, insize : Aint, position : Aint*, outbuf : Void*, outcount : LibC::Int, datatype : Datatype) : LibC::Int
  # fun win_create_errhandler = MPI_Win_create_errhandler(win_errhandler_fn : (Win*, LibC::Int* -> Void), errhandler : Errhandler*) : LibC::Int
  # fun win_get_errhandler = MPI_Win_get_errhandler(win : Win, errhandler : Errhandler*) : LibC::Int
  # fun win_set_errhandler = MPI_Win_set_errhandler(win : Win, errhandler : Errhandler) : LibC::Int
  # fun type_create_f90_integer = MPI_Type_create_f90_integer(range : LibC::Int, newtype : Datatype*) : LibC::Int
  # fun type_create_f90_real = MPI_Type_create_f90_real(precision : LibC::Int, range : LibC::Int, newtype : Datatype*) : LibC::Int
  # fun type_create_f90_complex = MPI_Type_create_f90_complex(precision : LibC::Int, range : LibC::Int, newtype : Datatype*) : LibC::Int
  # fun reduce_local = MPI_Reduce_local(inbuf : Void*, inoutbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op) : LibC::Int
  # fun op_commutative = MPI_Op_commutative(op : Op, commute : LibC::Int*) : LibC::Int
  # fun reduce_scatter_block = MPI_Reduce_scatter_block(sendbuf : Void*, recvbuf : Void*, recvcount : LibC::Int, datatype : Datatype, op : Op, comm : Comm) : LibC::Int
  # fun dist_graph_create_adjacent = MPI_Dist_graph_create_adjacent(comm_old : Comm, indegree : LibC::Int, sources : LibC::Int*, sourceweights : LibC::Int*, outdegree : LibC::Int, destinations : LibC::Int*, destweights : LibC::Int*, info : Info, reorder : LibC::Int, comm_dist_graph : Comm*) : LibC::Int
  # fun dist_graph_create = MPI_Dist_graph_create(comm_old : Comm, n : LibC::Int, sources : LibC::Int*, degrees : LibC::Int*, destinations : LibC::Int*, weights : LibC::Int*, info : Info, reorder : LibC::Int, comm_dist_graph : Comm*) : LibC::Int
  # fun dist_graph_neighbors_count = MPI_Dist_graph_neighbors_count(comm : Comm, indegree : LibC::Int*, outdegree : LibC::Int*, weighted : LibC::Int*) : LibC::Int
  # fun dist_graph_neighbors = MPI_Dist_graph_neighbors(comm : Comm, maxindegree : LibC::Int, sources : LibC::Int*, sourceweights : LibC::Int*, maxoutdegree : LibC::Int, destinations : LibC::Int*, destweights : LibC::Int*) : LibC::Int
  # fun improbe = MPI_Improbe(source : LibC::Int, tag : LibC::Int, comm : Comm, flag : LibC::Int*, message : Message*, status : Status*) : LibC::Int

  # fun imrecv = MPI_Imrecv(buf : Void*, count : LibC::Int, datatype : Datatype, message : Message*, request : Request*) : LibC::Int
  # fun mprobe = MPI_Mprobe(source : LibC::Int, tag : LibC::Int, comm : Comm, message : Message*, status : Status*) : LibC::Int
  # fun mrecv = MPI_Mrecv(buf : Void*, count : LibC::Int, datatype : Datatype, message : Message*, status : Status*) : LibC::Int
  # fun comm_idup = MPI_Comm_idup(comm : Comm, newcomm : Comm*, request : Request*) : LibC::Int
  # fun ibarrier = MPI_Ibarrier(comm : Comm, request : Request*) : LibC::Int
  # fun ibcast = MPI_Ibcast(buffer : Void*, count : LibC::Int, datatype : Datatype, root : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun igather = MPI_Igather(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, root : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun igatherv = MPI_Igatherv(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, displs : LibC::Int*, recvtype : Datatype, root : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun iscatter = MPI_Iscatter(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, root : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun iscatterv = MPI_Iscatterv(sendbuf : Void*, sendcounts : LibC::Int*, displs : LibC::Int*, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, root : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun iallgather = MPI_Iallgather(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, comm : Comm, request : Request*) : LibC::Int
  # fun iallgatherv = MPI_Iallgatherv(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, displs : LibC::Int*, recvtype : Datatype, comm : Comm, request : Request*) : LibC::Int
  # fun ialltoall = MPI_Ialltoall(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, comm : Comm, request : Request*) : LibC::Int
  # fun ialltoallv = MPI_Ialltoallv(sendbuf : Void*, sendcounts : LibC::Int*, sdispls : LibC::Int*, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, rdispls : LibC::Int*, recvtype : Datatype, comm : Comm, request : Request*) : LibC::Int
  # fun ialltoallw = MPI_Ialltoallw(sendbuf : Void*, sendcounts : LibC::Int*, sdispls : LibC::Int*, sendtypes : Datatype*, recvbuf : Void*, recvcounts : LibC::Int*, rdispls : LibC::Int*, recvtypes : Datatype*, comm : Comm, request : Request*) : LibC::Int
  # fun ireduce = MPI_Ireduce(sendbuf : Void*, recvbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op, root : LibC::Int, comm : Comm, request : Request*) : LibC::Int
  # fun iallreduce = MPI_Iallreduce(sendbuf : Void*, recvbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op, comm : Comm, request : Request*) : LibC::Int
  # fun ireduce_scatter = MPI_Ireduce_scatter(sendbuf : Void*, recvbuf : Void*, recvcounts : LibC::Int*, datatype : Datatype, op : Op, comm : Comm, request : Request*) : LibC::Int
  # fun ireduce_scatter_block = MPI_Ireduce_scatter_block(sendbuf : Void*, recvbuf : Void*, recvcount : LibC::Int, datatype : Datatype, op : Op, comm : Comm, request : Request*) : LibC::Int
  # fun iscan = MPI_Iscan(sendbuf : Void*, recvbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op, comm : Comm, request : Request*) : LibC::Int
  # fun iexscan = MPI_Iexscan(sendbuf : Void*, recvbuf : Void*, count : LibC::Int, datatype : Datatype, op : Op, comm : Comm, request : Request*) : LibC::Int
  # fun ineighbor_allgather = MPI_Ineighbor_allgather(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, comm : Comm, request : Request*) : LibC::Int
  # fun ineighbor_allgatherv = MPI_Ineighbor_allgatherv(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, displs : LibC::Int*, recvtype : Datatype, comm : Comm, request : Request*) : LibC::Int
  # fun ineighbor_alltoall = MPI_Ineighbor_alltoall(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, comm : Comm, request : Request*) : LibC::Int
  # fun ineighbor_alltoallv = MPI_Ineighbor_alltoallv(sendbuf : Void*, sendcounts : LibC::Int*, sdispls : LibC::Int*, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, rdispls : LibC::Int*, recvtype : Datatype, comm : Comm, request : Request*) : LibC::Int
  # fun ineighbor_alltoallw = MPI_Ineighbor_alltoallw(sendbuf : Void*, sendcounts : LibC::Int*, sdispls : Aint*, sendtypes : Datatype*, recvbuf : Void*, recvcounts : LibC::Int*, rdispls : Aint*, recvtypes : Datatype*, comm : Comm, request : Request*) : LibC::Int
  # fun neighbor_allgather = MPI_Neighbor_allgather(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, comm : Comm) : LibC::Int
  # fun neighbor_allgatherv = MPI_Neighbor_allgatherv(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, displs : LibC::Int*, recvtype : Datatype, comm : Comm) : LibC::Int
  # fun neighbor_alltoall = MPI_Neighbor_alltoall(sendbuf : Void*, sendcount : LibC::Int, sendtype : Datatype, recvbuf : Void*, recvcount : LibC::Int, recvtype : Datatype, comm : Comm) : LibC::Int
  # fun neighbor_alltoallv = MPI_Neighbor_alltoallv(sendbuf : Void*, sendcounts : LibC::Int*, sdispls : LibC::Int*, sendtype : Datatype, recvbuf : Void*, recvcounts : LibC::Int*, rdispls : LibC::Int*, recvtype : Datatype, comm : Comm) : LibC::Int
  # fun neighbor_alltoallw = MPI_Neighbor_alltoallw(sendbuf : Void*, sendcounts : LibC::Int*, sdispls : Aint*, sendtypes : Datatype*, recvbuf : Void*, recvcounts : LibC::Int*, rdispls : Aint*, recvtypes : Datatype*, comm : Comm) : LibC::Int
  # fun comm_split_type = MPI_Comm_split_type(comm : Comm, split_type : LibC::Int, key : LibC::Int, info : Info, newcomm : Comm*) : LibC::Int
  # fun get_elements_x = MPI_Get_elements_x(status : Status*, datatype : Datatype, count : Count*) : LibC::Int

  # fun status_set_elements_x = MPI_Status_set_elements_x(status : Status*, datatype : Datatype, count : Count) : LibC::Int
  # fun type_get_extent_x = MPI_Type_get_extent_x(datatype : Datatype, lb : Count*, extent : Count*) : LibC::Int
  # fun type_get_true_extent_x = MPI_Type_get_true_extent_x(datatype : Datatype, lb : Count*, extent : Count*) : LibC::Int
  # fun type_size_x = MPI_Type_size_x(datatype : Datatype, size : Count*) : LibC::Int
  # fun comm_create_group = MPI_Comm_create_group(comm : Comm, group : Group, tag : LibC::Int, newcomm : Comm*) : LibC::Int
  # fun aint_add = MPI_Aint_add(base : Aint, disp : Aint) : Aint
  # fun aint_diff = MPI_Aint_diff(addr1 : Aint, addr2 : Aint) : Aint
  # fun t_init_thread = MPI_T_init_thread(required : LibC::Int, provided : LibC::Int*) : LibC::Int
  # fun t_finalize = MPI_T_finalize : LibC::Int
  # fun t_enum_get_info = MPI_T_enum_get_info(enumtype : TEnum, num : LibC::Int*, name : LibC::Char*, name_len : LibC::Int*) : LibC::Int

  # fun t_enum_get_item = MPI_T_enum_get_item(enumtype : TEnum, indx : LibC::Int, value : LibC::Int*, name : LibC::Char*, name_len : LibC::Int*) : LibC::Int
  # fun t_cvar_get_num = MPI_T_cvar_get_num(num_cvar : LibC::Int*) : LibC::Int
  # fun t_cvar_get_info = MPI_T_cvar_get_info(cvar_index : LibC::Int, name : LibC::Char*, name_len : LibC::Int*, verbosity : LibC::Int*, datatype : Datatype*, enumtype : TEnum*, desc : LibC::Char*, desc_len : LibC::Int*, binding : LibC::Int*, scope : LibC::Int*) : LibC::Int
  # fun t_cvar_handle_alloc = MPI_T_cvar_handle_alloc(cvar_index : LibC::Int, obj_handle : Void*, handle : TCvarHandle*, count : LibC::Int*) : LibC::Int

  # fun t_cvar_handle_free = MPI_T_cvar_handle_free(handle : TCvarHandle*) : LibC::Int
  # fun t_cvar_read = MPI_T_cvar_read(handle : TCvarHandle, buf : Void*) : LibC::Int
  # fun t_cvar_write = MPI_T_cvar_write(handle : TCvarHandle, buf : Void*) : LibC::Int
  # fun t_pvar_get_num = MPI_T_pvar_get_num(num_pvar : LibC::Int*) : LibC::Int
  # fun t_pvar_get_info = MPI_T_pvar_get_info(pvar_index : LibC::Int, name : LibC::Char*, name_len : LibC::Int*, verbosity : LibC::Int*, var_class : LibC::Int*, datatype : Datatype*, enumtype : TEnum*, desc : LibC::Char*, desc_len : LibC::Int*, binding : LibC::Int*, readonly : LibC::Int*, continuous : LibC::Int*, atomic : LibC::Int*) : LibC::Int
  # fun t_pvar_session_create = MPI_T_pvar_session_create(session : TPvarSession*) : LibC::Int

  # fun t_pvar_session_free = MPI_T_pvar_session_free(session : TPvarSession*) : LibC::Int
  # fun t_pvar_handle_alloc = MPI_T_pvar_handle_alloc(session : TPvarSession, pvar_index : LibC::Int, obj_handle : Void*, handle : TPvarHandle*, count : LibC::Int*) : LibC::Int

  # fun t_pvar_handle_free = MPI_T_pvar_handle_free(session : TPvarSession, handle : TPvarHandle*) : LibC::Int
  # fun t_pvar_start = MPI_T_pvar_start(session : TPvarSession, handle : TPvarHandle) : LibC::Int
  # fun t_pvar_stop = MPI_T_pvar_stop(session : TPvarSession, handle : TPvarHandle) : LibC::Int
  # fun t_pvar_read = MPI_T_pvar_read(session : TPvarSession, handle : TPvarHandle, buf : Void*) : LibC::Int
  # fun t_pvar_write = MPI_T_pvar_write(session : TPvarSession, handle : TPvarHandle, buf : Void*) : LibC::Int
  # fun t_pvar_reset = MPI_T_pvar_reset(session : TPvarSession, handle : TPvarHandle) : LibC::Int
  # fun t_pvar_readreset = MPI_T_pvar_readreset(session : TPvarSession, handle : TPvarHandle, buf : Void*) : LibC::Int
  # fun t_category_get_num = MPI_T_category_get_num(num_cat : LibC::Int*) : LibC::Int
  # fun t_category_get_info = MPI_T_category_get_info(cat_index : LibC::Int, name : LibC::Char*, name_len : LibC::Int*, desc : LibC::Char*, desc_len : LibC::Int*, num_cvars : LibC::Int*, num_pvars : LibC::Int*, num_categories : LibC::Int*) : LibC::Int
  # fun t_category_get_cvars = MPI_T_category_get_cvars(cat_index : LibC::Int, len : LibC::Int, indices : LibC::Int*) : LibC::Int
  # fun t_category_get_pvars = MPI_T_category_get_pvars(cat_index : LibC::Int, len : LibC::Int, indices : LibC::Int*) : LibC::Int
  # fun t_category_get_categories = MPI_T_category_get_categories(cat_index : LibC::Int, len : LibC::Int, indices : LibC::Int*) : LibC::Int
  # fun t_category_changed = MPI_T_category_changed(stamp : LibC::Int*) : LibC::Int
  # fun t_cvar_get_index = MPI_T_cvar_get_index(name : LibC::Char*, cvar_index : LibC::Int*) : LibC::Int
  # fun t_pvar_get_index = MPI_T_pvar_get_index(name : LibC::Char*, var_class : LibC::Int, pvar_index : LibC::Int*) : LibC::Int
  # fun t_category_get_index = MPI_T_category_get_index(name : LibC::Char*, cat_index : LibC::Int*) : LibC::Int
  # fun file_open = MPI_File_open(comm : Comm, filename : LibC::Char*, amode : LibC::Int, info : Info, fh : File*) : LibC::Int
  # fun file_close = MPI_File_close(fh : File*) : LibC::Int
  # fun file_delete = MPI_File_delete(filename : LibC::Char*, info : Info) : LibC::Int
  # fun file_set_size = MPI_File_set_size(fh : File, size : Offset) : LibC::Int

  # fun file_preallocate = MPI_File_preallocate(fh : File, size : Offset) : LibC::Int
  # fun file_get_size = MPI_File_get_size(fh : File, size : Offset*) : LibC::Int
  # fun file_get_group = MPI_File_get_group(fh : File, group : Group*) : LibC::Int
  # fun file_get_amode = MPI_File_get_amode(fh : File, amode : LibC::Int*) : LibC::Int
  # fun file_set_info = MPI_File_set_info(fh : File, info : Info) : LibC::Int
  # fun file_get_info = MPI_File_get_info(fh : File, info_used : Info*) : LibC::Int
  # fun file_set_view = MPI_File_set_view(fh : File, disp : Offset, etype : Datatype, filetype : Datatype, datarep : LibC::Char*, info : Info) : LibC::Int
  # fun file_get_view = MPI_File_get_view(fh : File, disp : Offset*, etype : Datatype*, filetype : Datatype*, datarep : LibC::Char*) : LibC::Int
  # fun file_read_at = MPI_File_read_at(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_read_at_all = MPI_File_read_at_all(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_write_at = MPI_File_write_at(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_write_at_all = MPI_File_write_at_all(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_iread_at = MPI_File_iread_at(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_iwrite_at = MPI_File_iwrite_at(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_read = MPI_File_read(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_read_all = MPI_File_read_all(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_write = MPI_File_write(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_write_all = MPI_File_write_all(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_iread = MPI_File_iread(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_iwrite = MPI_File_iwrite(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_seek = MPI_File_seek(fh : File, offset : Offset, whence : LibC::Int) : LibC::Int
  # fun file_get_position = MPI_File_get_position(fh : File, offset : Offset*) : LibC::Int
  # fun file_get_byte_offset = MPI_File_get_byte_offset(fh : File, offset : Offset, disp : Offset*) : LibC::Int
  # fun file_read_shared = MPI_File_read_shared(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_write_shared = MPI_File_write_shared(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_iread_shared = MPI_File_iread_shared(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_iwrite_shared = MPI_File_iwrite_shared(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_read_ordered = MPI_File_read_ordered(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_write_ordered = MPI_File_write_ordered(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, status : Status*) : LibC::Int
  # fun file_seek_shared = MPI_File_seek_shared(fh : File, offset : Offset, whence : LibC::Int) : LibC::Int
  # fun file_get_position_shared = MPI_File_get_position_shared(fh : File, offset : Offset*) : LibC::Int
  # fun file_read_at_all_begin = MPI_File_read_at_all_begin(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype) : LibC::Int
  # fun file_read_at_all_end = MPI_File_read_at_all_end(fh : File, buf : Void*, status : Status*) : LibC::Int
  # fun file_write_at_all_begin = MPI_File_write_at_all_begin(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype) : LibC::Int
  # fun file_write_at_all_end = MPI_File_write_at_all_end(fh : File, buf : Void*, status : Status*) : LibC::Int
  # fun file_read_all_begin = MPI_File_read_all_begin(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype) : LibC::Int
  # fun file_read_all_end = MPI_File_read_all_end(fh : File, buf : Void*, status : Status*) : LibC::Int
  # fun file_write_all_begin = MPI_File_write_all_begin(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype) : LibC::Int
  # fun file_write_all_end = MPI_File_write_all_end(fh : File, buf : Void*, status : Status*) : LibC::Int
  # fun file_read_ordered_begin = MPI_File_read_ordered_begin(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype) : LibC::Int
  # fun file_read_ordered_end = MPI_File_read_ordered_end(fh : File, buf : Void*, status : Status*) : LibC::Int
  # fun file_write_ordered_begin = MPI_File_write_ordered_begin(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype) : LibC::Int
  # fun file_write_ordered_end = MPI_File_write_ordered_end(fh : File, buf : Void*, status : Status*) : LibC::Int
  # fun file_get_type_extent = MPI_File_get_type_extent(fh : File, datatype : Datatype, extent : Aint*) : LibC::Int
  # fun register_datarep = MPI_Register_datarep(datarep : LibC::Char*, read_conversion_fn : (Void*, Datatype, LibC::Int, Void*, Offset, Void* -> LibC::Int), write_conversion_fn : (Void*, Datatype, LibC::Int, Void*, Offset, Void* -> LibC::Int), dtype_file_extent_fn : (Datatype, Aint*, Void* -> LibC::Int), extra_state : Void*) : LibC::Int
  # fun file_set_atomicity = MPI_File_set_atomicity(fh : File, flag : LibC::Int) : LibC::Int
  # fun file_get_atomicity = MPI_File_get_atomicity(fh : File, flag : LibC::Int*) : LibC::Int
  # fun file_sync = MPI_File_sync(fh : File) : LibC::Int
  # fun file_iread_at_all = MPI_File_iread_at_all(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_iwrite_at_all = MPI_File_iwrite_at_all(fh : File, offset : Offset, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_iread_all = MPI_File_iread_all(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_iwrite_all = MPI_File_iwrite_all(fh : File, buf : Void*, count : LibC::Int, datatype : Datatype, request : Request*) : LibC::Int
  # fun file_f2c = MPI_File_f2c(file : Fint) : File
  # fun file_c2f = MPI_File_c2f(file : File) : Fint

end
